<?php

/**
 * @file
 * Tracks node popularity and extends Solr ranking for each node with its popularity.
 */

/**
 * Implements hook_exit().
 *
 * Gathers statistics for page accesses.
 */
function apachesolr_popularity_exit() {
  
  global $user;

  drupal_bootstrap(DRUPAL_BOOTSTRAP_VARIABLES);

  if (variable_get('popularity_tracker', 0)) {
    // We are counting content views.
    if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL) {
      // A node has been viewed, so update the node's counters.
      db_merge('apachesolr_popularity_counter')
        ->key(array('nid' => arg(1)))
        ->fields(array(
          'recentcount' => 1,
          'popularity' => 1,
        ))
        ->expression('recentcount', 'recentcount + 1')
        ->expression('popularity', 'popularity + 1')
        ->execute();
    }
  }
}

/**
 * Implements hook_menu().
 */
function apachesolr_popularity_menu() {
  $items['admin/reports/popularpages'] = array(
    'title' => 'Popular pages',
    'description' => 'View most popular pages.',
    'page callback' => 'apachesolr_popularity_top_pages',
    'access arguments' => array('administer search'),
//  'access arguments' => array('access statistics'),
    'file' => 'apachesolr_popularity.admin.inc',
  );
  $items['admin/config/search/apachesolr/apachesolr_popularity'] = array(
    'title' => 'Node Popularity',
    'description' => 'Configure Apache Solr Popularity Tracking.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_popularity_settings_form'),
//  'page arguments' => array('statistics_settings_form'),
    'access arguments' => array('administer search'),
//  'access arguments' => array('access statistics'),
    'file' => 'apachesolr_popularity.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function apachesolr_popularity_cron() {
  
  $apachesolr_popularity_timestamp = variable_get('apachesolr_popularity_day_timestamp', '');
 
  // TODO: get current time stamp to determine $elapsed time
  $elapsed_time = 0.2;
    
  // TODO: ADD TIME CHECK
  // TODO: CREATE VARIABLE $apachesolr_popularity_timestamp
  
  // TODO: CORRECT THIS SO IT MAKES SENSE
  //if ((REQUEST_TIME - $apachesolr_popularity_timestamp) >= 86400) {
  
    // TODO: get this variable from a configurable form in Apache Solr Node Popularity config 
  $daily_decay_rate = 0.95;

  $decay_constant = log($daily_decay_rate);
  $epoch_decay_rate = exp($decay_constant * $elapsed_time);

  $query = db_query("SELECT * FROM {apachesolr_popularity_counter}");

  foreach ($query as $record) {

    $avg_new = $elapsed_time / ($elapsed_time + $record->daystracked);
    $avg_old = $record->daystracked / ($elapsed_time + $record->daystracked);
    $popularity = ($avg_new * $record->recentcount) + ($epoch_decay_rate * $avg_old * $record->popularity);

    db_update('projects')
      ->fields(array(
              'popularity' => $popularity,
              'recentcount' => 0,
              'daystracked' => $record->daystracked + $elapsed_time,
              )
      )
      ->condition('nid', $record->nid)
      ->execute();
  }

  /*
  db_update('apachesolr_popularity_counter')
    ->expression('daystracked', 'daystracked + :amount', array(':amount' => $elapsed_time))
    ->execute();
  */
//}
  
  variable_set('apachesolr_popularity_day_timestamp', REQUEST_TIME);
  
}

