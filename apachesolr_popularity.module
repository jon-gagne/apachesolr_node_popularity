<?php

/**
 * @file
 * Tracks node popularity and extends Solr ranking for each node with its popularity.
 * 
 * @author Jonathan Gagne (jongagne)
 *   @see drupal.org/user/2409764
 */


// tracking flag constants
if (!defined('UNPUBLISHED')) {
  define('UNPUBLISHED', 0x1);
}
if (!defined('FRONTPAGE')) {
  define('FRONTPAGE', 0x2);
}
// unused, but an example of how to expand the flash in the future. Flag value should be increased by pow(2, x)
/*
if (!defined('MISC_ATTRIBUTE1')) {
  define('MISC_ATTRIBUTE', 0x4);
}
if (!defined('MISC_ATTRIBUTE2')) {
  define('MISC_ATTRIBUTE', 0x8);
}
if (!defined('MISC_ATTRIBUTE3')) {
  define('MISC_ATTRIBUTE', 0x16);
}
*/


// Other constants
if (!defined('OFF')) {
  define('OFF', FALSE);
}
if (!defined('ON')) {
  define('ON', TRUE);
}

// sets binary flags
function setflag(&$var, $flag, $set=ON) {
  if ($set==ON) $var = ($var | $flag);
  if ($set==OFF) $var = ($var & ~$flag);
}


/**
 * Implements hook_exit().
 *
 * Gathers statistics for page accesses.
 */
function apachesolr_popularity_exit() {
  
  //global $user;

  drupal_bootstrap(DRUPAL_BOOTSTRAP_VARIABLES);
  
  if (variable_get('popularity_tracker', 0)) {
    // We are counting content views.
    if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL) {      
      $nid = arg(1);
      // get tracking flags and also node flags
      $tracking_flags = _apachesolr_popularity_get_tracking_flags();
      $node_flags = _apachesolr_popularity_get_nid_flags($nid);
      // Only update nodes that should be tracked
      if (!($tracking_flags & $node_flags)) {
        // Update the node's counters.
        db_merge('apachesolr_popularity_counter')
          ->key(array('nid' => $nid))
          ->insertFields(array(
            'popularity' => (float) variable_get('apachesolr_popularity_init_popularity', 20.0),
            'recentcount' => 1,
          ))
          ->expression('recentcount', 'recentcount + 1')
          ->execute();
        
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function apachesolr_popularity_menu() {
  $items['admin/reports/popularpages'] = array(
    'title' => 'Popular pages',
    'description' => 'View most popular pages.',
    'page callback' => 'apachesolr_popularity_top_pages',
    'access arguments' => array('administer search'),
//  'access arguments' => array('access statistics'),
    'file' => 'apachesolr_popularity.admin.inc',
  );
  $items['admin/config/search/apachesolr/apachesolr_popularity'] = array(
    'title' => 'Node Popularity',
    //'description' => 'Configure Apache Solr Popularity Tracking.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_popularity_settings_form'),
    'access arguments' => array('administer search'),
    'file' => 'apachesolr_popularity.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/search/apachesolr/apachesolr_popularity/basic_settings'] = array(
    'title' => 'Basic Settings',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/config/search/apachesolr/apachesolr_popularity/advanced_settings'] = array(
    'title' => 'Advanced Settings',
    'weight' => 1,
    //'description' => 'Advanced Settings - Apache Solr Popularity Tracking.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_popularity_advanced_form'),
    'access arguments' => array('administer search'),
    'file' => 'apachesolr_popularity.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implements hook_cron().
 * 
 * Updates node popularity and sends to solr.
 */
function apachesolr_popularity_cron() {
     
  // Updates node popularity
  _apachesolr_popularity_update_popularity();
  
  // writes data to disk and sends to solr
  _apachesolr_popularity_send_to_solr();
  
}


/**
 * Updates node popularity
 */
function _apachesolr_popularity_update_popularity() {
  
  $apachesolr_popularity_timestamp = variable_get('apachesolr_popularity_day_timestamp', '');
  variable_set('apachesolr_popularity_day_timestamp', REQUEST_TIME);
  
  $forgetting_window = (float) variable_get('apachesolr_popularity_forgetting_window', 5.0);
  $init_damping = (float) variable_get('apachesolr_popularity_init_damping', 0.2);
    
  // holds the popularity for each node
  $popularity_data = array();
  
  // stores the node id
  
  
  // TODO: get current time stamp to determine $elapsed time
  $elapsed_time = 0.2;
      
  // TODO: ADD TIME CHECK
  // TODO: CREATE VARIABLE $apachesolr_popularity_timestamp
  
  // TODO: CORRECT THIS SO IT MAKES SENSE
  //if ((REQUEST_TIME - $apachesolr_popularity_timestamp) >= 86400) {
  
  // Make sure front page is properly flagged
  _apachesolr_popularity_set_front_page_flags();
  
  // Set tracking flags. Aka nodes NOT to track
  $flag = _apachesolr_popularity_get_tracking_flags();

  // Clear untracked values
  db_update('apachesolr_popularity_counter')
      ->fields(array(
              'recentcount' => 0,
              'daystracked' => 0,
              )
      )
      ->condition('flag', $flag, '&')
      ->execute();
  
  // gets tracking statistics
  $query = db_query("SELECT * FROM {apachesolr_popularity_counter} WHERE flag & :flag = 0", array(':flag' => $flag));
  
  // get max recent count. used for normalization
  $recentcount_max = db_query("SELECT MAX(recentcount) FROM {apachesolr_popularity_counter} WHERE flag & :flag = 0", array(':flag' => $flag))->fetchField();

  // prevents division by zero
  if ( $elapsed_time == 0.0 ) $elapsed_time = 0.0001;
  if ( $recentcount_max < 1.0 ) $recentcount_max = 1.0;
  
  // used for time scaling and recentcount normalization
  $recentcount_normalization = 100.0 / ($recentcount_max);
  
  // calculates popularity
  foreach ($query as $record) {

    //$popularity = ($record->recentcount / $elapsed_time) + ($epoch_decay_rate * $record->popularity);
    $total_time = $record->daystracked + $elapsed_time;
    
    // calculate popularity
    $popularity = ($record->popularity
                   + (_calculate_gain_logistic_decay($elapsed_time, $total_time+$init_damping, $forgetting_window) 
                      * 
                      ( ($record->recentcount * $recentcount_normalization) - $record->popularity )
                     )
                  );
    
    db_update('apachesolr_popularity_counter')
      ->fields(array(
              'popularity' => $popularity,
              'recentcount' => 0,
              'daystracked' => $total_time,
              )
      )
      ->condition('nid', $record->nid)
      ->execute();
        
  }
}


/**
 * Gain function - Iterative mean
 *
 * Manditory parameter conditions:  $total_time > 0.0 AND $delta_time <= $total_time 
 *  
 * Returns value between [0, 1]
 */
function _calculate_gain_mean($delta_time, $total_time) {
    
  return $delta_time/$total_time;
}

/**
 * Gain function - Logistic decay
 * 
 * Manditory paramater conditions:  $max_time > 0.0 AND $total_time > 0.0 AND $delta_time <= $total_time 
 * 
 * Returns value between [0, 1]
 */
function _calculate_gain_logistic_decay($delta_time, $total_time, $max_time) {
  
  $exp_delta = exp(-2.0*$delta_time/$max_time);
  $exp_total = exp(-2.0*$total_time/$max_time);
  return ( (1 - $exp_delta)/(1 + $exp_delta) ) * ( (1 + $exp_total)/(1 - $exp_total) ) ;
}


/**
 * Linear popularity normalization
 * 
 *    No Compression
 */
function _normalize_pop_linear($popularity, $pop_max) {
  // prevents divsion of zero and reduces influence of popularity on ranking if it is very low
  if ( $pop_max < 1.0 )  $pop_max = 1.0;
    
  return $popularity / $pop_max;
}

/**
 * Square root popularity normalization
 * 
 *    Moderate Compression
 */
function _normalize_pop_root($popularity, $pop_max) {
  // prevents divsion of zero and reduces influence of popularity on ranking if it is very low
  if ( $pop_max < 1.0 )  $pop_max = 1.0;
  
  return sqrt($popularity / $pop_max);
}

/**
 * Logrithmic popularity normalization
 * 
 *    High compression
 */
function _normalize_pop_log($popularity, $pop_max, $smoothing_factor=2.0, $base=2.0) {
  // prevents divsion of zero and reduces influence of popularity on ranking if it is very low
  if ( $pop_max < 1.0 )  $pop_max = 1.0;
  
  return (log($smoothing_factor + $popularity, $base) / log($smoothing_factor + $pop_max, $base));
}


/**
 * Updates Solr's popularity values
 */
function _apachesolr_popularity_send_to_solr() {
  
  // writes popularity from db to disk and copies it to Solr data dir
  _apachesolr_popularity_send_data_to_solr(_apachesolr_popularity_db_popularity_to_string()); 
  
  // reloads Solr cache
  $default_env_id = variable_get('apachesolr_default_environment', 'solr');
  $default_env_url = db_query('SELECT url FROM {apachesolr_environment} WHERE env_id = :env_id', array(':env_id' => $default_env_id))->fetchField();
  $xml = file_get_contents($default_env_url . '/reloadCache');
  
  /* OPTIONAL: check $xml to see if the status was good
   * 
   * Result should look something like this:
   * 
   * <?xml version="1.0" encoding="UTF-8"?>
   * <response>
   * <lst name="responseHeader"><int name="status">0</int><int name="QTime">41</int></lst>
   * </response>
   */
}


/**
 * Gets popularity from database and puts it into a string
 */
function _apachesolr_popularity_db_popularity_to_string() {
  
  // gets popularity coefficient
  $pop_coefficient = (float) variable_get('apachesolr_popularity_influence', 2.0);
  
  // gets low popularity influence  
  $low_pop_influence = (float) variable_get('apachesolr_popularity_low_pop_influence', 1.0);
  
  // gets type of popularity compression
  $compression = variable_get('apachesolr_popularity_compression', 'N');
  
  // Set tracking flags. Aka nodes NOT to track
  $flag = _apachesolr_popularity_get_tracking_flags();
  
  // queries the popularity values  
  $query = db_query("SELECT nid, popularity FROM {apachesolr_popularity_counter} WHERE flag & :flag = 0", array(':flag' => $flag));

  // gets the maximum value
  $pop_max = db_query("SELECT MAX(popularity) FROM {apachesolr_popularity_counter} WHERE flag & :flag = 0", array(':flag' => $flag))->fetchField();
  
  // holds the popularity values in a string for solr
  $popularity_string = '';
  
  // writes the popularity
  foreach ($query as $record) {
   
    // Deterime compression type for popularity normalion and calculate popularity_ranking_score
    if ($compression == 'S') {
      $popularity_ranking_score = $low_pop_influence + $pop_coefficient * _normalize_pop_root($record->popularity, $pop_max);
    }
    else if ($compression == 'L') {
      $popularity_ranking_score = $low_pop_influence + $pop_coefficient * _normalize_pop_log($record->popularity, $pop_max);      
    }
    else {
      $popularity_ranking_score = $low_pop_influence + $pop_coefficient * _normalize_pop_linear($record->popularity, $pop_max);
    }
    $popularity_string .= apachesolr_site_hash() . "/node/" . $record->nid . "=" . $popularity_ranking_score . "\n";      
  }
  
  return $popularity_string;
}


/**
 * Writes popularity string data to the file system and copies it to the Solr data directory
 */
function _apachesolr_popularity_send_data_to_solr($data) {
  
  // TODO: create interface to set $solr_data_dir
  //$solr_data_dir = "/opt/tomcat/solr/data/";  // get variable instead
  $solr_data_dir = variable_get('apachesolr_popularity_solr_data_dir', '');
  
  if ($solr_data_dir != '') {
    $filename = 'external_eff_popularity';
    $destination = file_build_uri($filename);

    file_save_data($data, $destination, $replace=1);

    copy($_SERVER['DOCUMENT_ROOT'] . base_path() . "sites/default/files/" . $filename, $solr_data_dir . $filename);
  }
}


/**
 * Formats an item for display from nid
 *
 * @return
 *   An HTML string with $title linked to the $path.
 */
function _apachesolr_popularity_format_item($nid) {
  
  $path = "node/".$nid;
  $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchfield(0);
  $title = truncate_utf8($title, 60, TRUE, TRUE, 45);
  
  $output = l($title, $path);
  return $output;
}


/**
 * Implements hook_node_insert().
 */
function apachesolr_popularity_node_insert($node) {  
  // begins tracking node
  _apachesolr_popularity_add_node($node);
}


/**
 * Adds a node to the tracking table using the node's nid
 */
function _apachesolr_popularity_add_node($node) {
    // Set tracking flags. Aka nodes NOT to track
  $flag = _apachesolr_popularity_get_node_flags($node);
  
  db_merge('apachesolr_popularity_counter')
      ->key(array('nid' => $node->nid))
      ->insertFields(array(
          'nid' => $nid,
          'recentcount' => 0,
          'popularity' => (float) variable_get('apachesolr_popularity_init_popularity', 20.0),
          'daystracked' => 0.0,
          'flag' => $flag
      ))
      ->updateFields(array(
          'flag' => $flag
      ))
      ->execute();
}


/**
 * Removes a node to the tracking table using the node's nid
 */
function _apachesolr_popularity_delete_node($nid) {
  db_delete('apachesolr_popularity_counter')
        ->condition('nid', $nid)
        ->execute();
}


/**
 * Gets front page nid if availalable
 */
function _apachesolr_popularity_get_front_page_nid() {
  // get front page nid (if available)
  $front_nid = NULL;
  $front_url = variable_get('site_frontpage', 'node');
  $front_url = drupal_get_normal_path($front_url);  // in case it was an alias
  $front_url = trim($front_url, '/');
  $front = explode('/', $front_url);
  if( $front[0]=='node' && ctype_digit($front[1]) ) {
    $front_nid = $front[1];
  }
  return $front_nid;
}

/**
 * Implements hook_node_delete().
 */
function apachesolr_popularity_node_delete($node) {
  // clean up popularity table when node is deleted
  db_delete('apachesolr_popularity_counter')
    ->condition('nid', $node->nid)
    ->execute();
}


/**
 * Implements hook_apachesolr_query_alter().
 */
function apachesolr_popularity_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  $query->addParam('boost', 'eff_popularity');
}


/**
 * Implements hook_apachesolr_confgen_solrconfig_alter().
 */
function apachesolr_popularity_apachesolr_confgen_solrconfig_alter($qp, $solr_version) {  
  $qp    
    ->find(':root')->xpath("requestHandler[@name='mlt']")
    ->after("\n\n  <!-- Reload Cache Request Handler -->\n  <requestHandler name=\"/reloadCache\" class=\"org.apache.solr.search.function.FileFloatSource\$ReloadCacheRequestHandler\"/>");
 }


/**
 * Implements hook node update
 * 
 * Finds whether a node's published status has changed 
 */
function apachesolr_popularity_node_update($node) {
  
  $flag = db_query('SELECT flag FROM {apachesolr_popularity_counter} WHERE nid = :nid', array(':nid' => $node->nid))->fetchfield(0);
  
  setflag($flag, UNPUBLISHED, !$node->status);
  
  db_update('apachesolr_popularity_counter')
      ->fields(array(
              'flag' => $flag
              )
      )
      ->condition('nid', $node->nid)
      ->execute();
}

/**
 * Get tracking flags (that are set up in basic settings
 */
function _apachesolr_popularity_get_tracking_flags() {
  $flag = 0x0;
  if (variable_get('apachesolr_popularity_only_published')) setflag($flag, UNPUBLISHED);
  if (variable_get('apachesolr_popularity_disable_frontpage')) setflag($flag, FRONTPAGE);
  return $flag;
}

/**
 * Get node flags
 */
function _apachesolr_popularity_get_node_flags($node) {
  $flag = 0x0;
  if (!$node->status) setflag($flag, UNPUBLISHED);
  if ($node->nid == _apachesolr_popularity_get_front_page_nid()) setflag($flag, FRONTPAGE);
  return $flag;
}

/**
 * Get node flags from nid
 */
function _apachesolr_popularity_get_nid_flags($nid) {
  // Get node status from nid
  $node_status = db_query("SELECT status FROM {node} WHERE nid = :nid LIMIT 1", array(':nid' => $nid))->fetchField();
  // Set flags
  $flag = 0x0;
  if (!$node_status) setflag($flag, UNPUBLISHED);
  if ($nid == _apachesolr_popularity_get_front_page_nid()) setflag($flag, FRONTPAGE);
  return $flag;
}

/**
 * Mark front page flags
 */
function _apachesolr_popularity_set_front_page_flags() {
  $front_nid = _apachesolr_popularity_get_front_page_nid();
  if ($front_nid) {
    
    $front_flags = _apachesolr_popularity_get_nid_flags($front_nid);
    
    db_merge('apachesolr_popularity_counter')
      ->key(array('nid' => $front_nid))
      ->insertFields(array(
          'nid' => $front_nid,
          'recentcount' => 0,
          'popularity' => (float) variable_get('apachesolr_popularity_init_popularity', 20.0),
          'daystracked' => 0.0,
          'flag' => $front_flags
      ))
      ->updateFields(array(
          'flag' => $front_flags
      ))
      ->execute();
  }  
}