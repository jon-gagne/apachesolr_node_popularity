<?php

/**
 * @file
 * Tracks node popularity and extends Solr ranking for each node with its popularity.
 */

/**
 * Implements hook_exit().
 *
 * Gathers statistics for page accesses.
 */
function apachesolr_popularity_exit() {
  
  global $user;

  drupal_bootstrap(DRUPAL_BOOTSTRAP_VARIABLES);

  if (variable_get('popularity_tracker', 0)) {
    // We are counting content views.
    if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL) {
      // A node has been viewed, so update the node's counters.
      db_merge('apachesolr_popularity_counter')
        ->key(array('nid' => arg(1)))
        ->fields(array(
          'recentcount' => 1,
        ))
        ->expression('recentcount', 'recentcount + 1')
        ->execute();
    }
  }
}

/**
 * Implements hook_menu().
 */
function apachesolr_popularity_menu() {
  $items['admin/reports/popularpages'] = array(
    'title' => 'Popular pages',
    'description' => 'View most popular pages.',
    'page callback' => 'apachesolr_popularity_top_pages',
    'access arguments' => array('administer search'),
//  'access arguments' => array('access statistics'),
    'file' => 'apachesolr_popularity.admin.inc',
  );
  $items['admin/config/search/apachesolr/apachesolr_popularity'] = array(
    'title' => 'Node Popularity',
    'description' => 'Configure Apache Solr Popularity Tracking.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_popularity_settings_form'),
//  'page arguments' => array('statistics_settings_form'),
    'access arguments' => array('administer search'),
//  'access arguments' => array('access statistics'),
    'file' => 'apachesolr_popularity.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 * 
 * Updates node popularity.
 */
function apachesolr_popularity_cron() {
  
  $apachesolr_popularity_timestamp = variable_get('apachesolr_popularity_day_timestamp', '');
  variable_set('apachesolr_popularity_day_timestamp', REQUEST_TIME);
  
  // holds the popularity for each node
  $popularity_data = array();
  
  // stores the node id
  
  
  // TODO: get current time stamp to determine $elapsed time
  $elapsed_time = 0.2;
    
  // TODO: ADD TIME CHECK
  // TODO: CREATE VARIABLE $apachesolr_popularity_timestamp
  
  // TODO: CORRECT THIS SO IT MAKES SENSE
  //if ((REQUEST_TIME - $apachesolr_popularity_timestamp) >= 86400) {
  
    // TODO: get this variable from a configurable form in Apache Solr Node Popularity config 
  $daily_decay_rate = 0.95;

  // calculate the exponential decay constant
  $decay_constant = log($daily_decay_rate);
  
  // calculate the decay rate for the time since last cron
  $epoch_decay_rate = exp($decay_constant * $elapsed_time);

  $query = db_query("SELECT * FROM {apachesolr_popularity_counter}");

  foreach ($query as $record) {

    /* iterative averaging removed
    $avg_new = $elapsed_time / ($elapsed_time + $record->daystracked);
    $avg_old = $record->daystracked / ($elapsed_time + $record->daystracked);
    $popularity = ($avg_new * $record->recentcount) + ($epoch_decay_rate * $avg_old * $record->popularity);
    */
    $popularity = $record->recentcount + ($epoch_decay_rate * $record->popularity);
    
    db_update('apachesolr_popularity_counter')
      ->fields(array(
              'popularity' => $popularity,
              'recentcount' => 0,
              'daystracked' => $record->daystracked + $elapsed_time,
              )
      )
      ->condition('nid', $record->nid)
      ->execute();
        
    $popularity_data[$record->nid] = $popularity;
  }

  // gets the maximum value
  $pop_max = max($popularity_data);
  
  // popularity ranking influence coefficient
  $pop_coefficient = 2.0;
  // TODO: setup interface for value
  //$pop_coefficient = variable_get('apachesolr_popularity_pop_coeff', '');
  
  // holds the popularity values in a string for solr
  $popularity_string = '';
  foreach ($popularity_data as $nid => $popularity) {
    // TODO: test and contrast linear, root, and log normalization version
    $popularity_string .= $nid . "=" . _normalize_pop_linear($popularity, $pop_max, $pop_coefficient) . "\n";
  }
  
  // writes data to disk and sends to solr
  _apachesolr_popularity_create_external_file($popularity_string);
  
}


/**
 * Linear popularity normalization
 * 
 *    No Compression
 */
function _normalize_pop_linear($popularity, $pop_max, $pop_coefficient) {
  return 1.0 + $pop_coefficient * ($popularity / $pop_max);
}


/**
 * Square root popularity normalization
 * 
 *    Moderate Compression
 */
function _normalize_pop_root($popularity, $pop_max, $pop_coefficient) {
  return 1.0 + $pop_coefficient * sqrt($popularity / $pop_max);
}


/**
 * Logrithmic popularity normalization
 * 
 *    High compression
 */
function _normalize_pop_log($popularity, $pop_max, $pop_coefficient, $smoothing_factor=2.0, $base=2.0) {
  return 1.0 + $pop_coefficient * (log($smoothing_factor + $popularity, $base) / log($smoothing_factor + $pop_max, $base));
}


/**
 * Writes popularity string data to the file system and copies it to the Solr data directory
 */
function _apachesolr_popularity_create_external_file(&$data) {
  
  // TODO: create interface to set $solr_data_dir
  $solr_data_dir = $_SERVER['DOCUMENT_ROOT'] . base_path();  // get variable instead
  $filename = 'external_popularity.txt';
  $destination = file_build_uri($filename);

  file_save_data($data, $destination, $replace=1);

  copy($_SERVER['DOCUMENT_ROOT'] . base_path() . "sites/default/files/" . $filename, $solr_data_dir . $filename);
}


/**
 * Formats an item for display from nid
 *
 * @return
 *   An HTML string with $title linked to the $path.
 */
function _apachesolr_popularity_format_item($nid) {
  
  $path = "node/".$nid;
  
  $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchfield(0);

  //$output  = ($title ? "$title<br />" : '');
  //$title .= drupal_get_path_alias($path);
  $title = truncate_utf8($title, 35);
  $output = l($title, $path);
  return $output;
}


/**
 * Implements hook_node_delete().
 */
function apachesolr_popularity_node_delete($node) {
  // clean up popularity table when node is deleted
  db_delete('apachesolr_popularity_counter')
    ->condition('nid', $node->nid)
    ->execute();
}
